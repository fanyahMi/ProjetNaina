<template>
    <div>
        <md-card>
        <md-card-header :data-background-color="dataBackgroundColor">
            <h4 class="title">Listes des [classNameMaj]:</h4>
        </md-card-header>
        <md-card-content>
            <md-table v-model="data" :table-header-color="tableHeaderColor">
            <md-table-row slot="md-table-row" slot-scope="{ item }">

                [Line]

                <md-table-cell md-label="Actions" class="md-text-center md-layout-align-end">
                <div class="smaller-cell">
                    <button type="button" class="button-borderless" @click="openModal" > 
                    <span class="bi bi-pencil-fill"></span> 
                    </button>
                    <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    <button class="text-danger button-borderless" @click="submitDelete(item.[PrimaryKey])"> 
                    <span class="bi bi-trash3-fill"></span> 
                    </button>
                </div>
                </md-table-cell>
            </md-table-row>
            
            </md-table>
        </md-card-content>
        </md-card>

        [modalModif]
       
    </div>
</template>

<script>
[imports]

export default {
  name: "table-[classNameMin]",
  props: {
    tableHeaderColor: {
      type: String,
      default: "",
    },
  },
  data() {
   
    return {
      selected: [],
      data: [],
      dataOne: null
    };
  },
  async mounted() {
      try {
        this.data = await [classNameMaj]Service.get();
      } catch (error) { 
        console.error("Erreur lors de la récupération des [classNameMaj]", error);
      }
    },
  methods: {
    openModal() {
      this.$refs.modale.style.display = "block";
    },
    closeModal(event) {
      if (event.target === this.$refs.modale) {
        this.$refs.modale.style.display = "none";
      }
    },
    async submitUpdate() {
        
      },

    async submitDelete(id) {
        try {
          await[classNameMaj]Service.delete(id);
          this.data = this.data.filter((dt) => dt.[PrimaryKey] !== id);
        } catch (error) {
          console.error("Erreur lors de la suppression de [classNameMaj]", error);
        }
      },
  },
};

</script>

<style>
.button-borderless {
  border: none; 
  background-color: transparent; 
}
.button-borderless:hover{
  border: 1px solid black;
}
</style>
